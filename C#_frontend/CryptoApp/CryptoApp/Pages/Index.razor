@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@using CryptoApp.Interop
@using System.Runtime.InteropServices
@inject ILogger<Index> Logger
@implements IDisposable

<PageTitle>Dashboard</PageTitle>

<h2>📊 Dashboard</h2>

<div class="status-panel">
    <h4>
        Общий статус бота:
        <span class="@GetStatusClass()">
            @if (BotConnected)
            {
                <text>🔄 Подключено</text>
            }
            else
            {
                <text>🔌 Отключено</text>
            }
        </span>
    </h4>
    @if (!BotConnected)
    {
        <button class="btn btn-success" @onclick="StartBot" disabled="@isProcessing">
            @if (isProcessing)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            ▶️ Старт бота
        </button>
    }
    else
    {
        <button class="btn btn-danger" @onclick="StopBot" disabled="@isProcessing">⏹️ Стоп бота</button>
    }
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert alert-info mt-3">
        <strong>Статус:</strong> @StatusMessage
    </div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3">
        <strong>Ошибка:</strong> @ErrorMessage
    </div>
}

<hr />

<div class="coins-list">
    <h4>Активные монеты</h4>
    <ul>
        @foreach (var coin in ActiveCoins)
        {
            <li>@coin</li>
        }
    </ul>
</div>

<hr />

<div class="info-section">
    <h4>📈 Текущие данные</h4>
    <p><strong>Последний сигнал:</strong> @LastSignal</p>
    <p><strong>PnL:</strong> @PnL$</p>
    <p><strong>Сделок выполнено:</strong> @TradesCount</p>
    <p><strong>Аптайм:</strong> @Uptime</p>
</div>

@code {
    private bool BotConnected = false;
    private bool isProcessing = false;
    private List<string> ActiveCoins = new() { "BTCUSDT", "ETHUSDT" };
    private string LastSignal = "Нет данных";
    private double PnL = 0.0;
    private int TradesCount = 0;
    private string Uptime => (DateTime.Now - StartTime).ToString(@"hh\:mm\:ss");
    private DateTime StartTime = DateTime.Now;
    private string StatusMessage = "";
    private string ErrorMessage = "";
    private RusterBot? rusterBot;

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr LoadLibrary(string dllToLoad);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool FreeLibrary(IntPtr hModule);

    protected override void OnInitialized()
    {
        Logger.LogInformation("🚀 Dashboard инициализирован в {Time}", DateTime.Now);
        StatusMessage = "Dashboard загружен успешно";
    }

    private bool CheckDllAvailability()
    {
        IntPtr handle = LoadLibrary("rust_binance_text.dll");
        if (handle == IntPtr.Zero)
        {
            int errorCode = Marshal.GetLastWin32Error();
            Logger.LogError("DLL load failed: {ErrorCode}", errorCode);
            return false;
        }
        FreeLibrary(handle);
        return true;
    }


        private async Task StartBot()
        {
            try
            {
                isProcessing = true;
                ErrorMessage = "";
                StatusMessage = "Проверка библиотеки...";
                StateHasChanged();

                // Проверяем доступность DLL
                if (!CheckDllAvailability())
                {
                    StatusMessage = "Ошибка: Не найдена библиотека rust_binance_text.dll";
                    ErrorMessage = "Убедитесь, что rust_binance_text.dll находится в папке с приложением";
                    Logger.LogError("❌ DLL not found or cannot be loaded");
                    return;
                }

                StatusMessage = "Запуск бота...";
                StateHasChanged();

                Logger.LogInformation("🔥 StartBot triggered at {Time}", DateTime.Now);


            // Проверка runtime перед запуском
            bool runtimeAlreadyExists = RusterBot.is_runtime_initialized();
            Logger.LogInformation("🧠 Tokio runtime already initialized? {Exists}", runtimeAlreadyExists);
            if (runtimeAlreadyExists)
            {
                StatusMessage = "⚠️ Внимание: Runtime уже инициализирован. Возможно, прошлый запуск не завершился.";
            }

                // Очищаем предыдущий экземпляр если есть
                if (rusterBot != null)
                {
                    rusterBot.OnDataReceived -= OnBotDataReceived;
                    rusterBot.Dispose();
                }

                rusterBot = new RusterBot();
                rusterBot.OnDataReceived += OnBotDataReceived;

                // Используем правильные параметры: числовые коды вместо строк
                // 1 = AggTrade, 2 = Kline_1m, 3 = Depth, 4 = BookTicker
                bool started = rusterBot.StartBot("BTCUSDT,ETHUSDT", "1,2");

                if (started)
                {
                    BotConnected = true;
                    StartTime = DateTime.Now; // Обновляем время старта
                    StatusMessage = "Бот успешно запущен через Rust библиотеку";
                    Logger.LogInformation("✅ Bot connected successfully");
                }
                else
                {
                    BotConnected = false;
                    StatusMessage = $"Не удалось запустить бот: {rusterBot.LastError}";
                    ErrorMessage = rusterBot.LastError ?? "Неизвестная ошибка";
                    Logger.LogWarning("⚠️ Failed to start bot: {Error}", rusterBot.LastError);
                }
            }
            catch (SEHException sehEx)
            {
                BotConnected = false;
                ErrorMessage = $"SEH Exception: {sehEx.Message} (код: 0x{sehEx.ErrorCode:X})";
                StatusMessage = "Критическая ошибка при запуске бота";
                Logger.LogError(sehEx, "❌ SEH Exception при запуске бота");
            }
            catch (DllNotFoundException dllEx)
            {
                BotConnected = false;
                ErrorMessage = $"DLL не найдена: {dllEx.Message}";
                StatusMessage = "Библиотека не найдена";
                Logger.LogError(dllEx, "❌ DLL не найдена");
            }
            catch (Exception ex)
            {
                BotConnected = false;
                ErrorMessage = $"Ошибка при запуске бота: {ex.Message}";
                StatusMessage = "Ошибка запуска";
                Logger.LogError(ex, "❌ Общая ошибка при запуске бота");
            }
            finally
            {
                isProcessing = false;
                StateHasChanged();
            }
        }

        private async Task StopBot()
        {
            try
            {
                isProcessing = true;
                StatusMessage = "Остановка бота...";
                StateHasChanged();

                Logger.LogInformation("🛑 StopBot triggered at {Time}", DateTime.Now);

                if (rusterBot != null && rusterBot.IsRunning)
                {
                    rusterBot.StopBot();

                    // Ждем корректной остановки
                    await Task.Delay(1000);

                    rusterBot.OnDataReceived -= OnBotDataReceived;
                    rusterBot.Dispose();
                    rusterBot = null;
                }

                BotConnected = false;
                StatusMessage = "Бот остановлен";
                ErrorMessage = "";
                Logger.LogInformation("✅ Bot stopped successfully");
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Ошибка при остановке бота: {ex.Message}";
                StatusMessage = "Ошибка остановки";
                Logger.LogError(ex, "❌ Ошибка при остановке бота");
            }
            finally
            {
                isProcessing = false;
                StateHasChanged();
            }
        }

        private void OnBotDataReceived(string jsonData)
        {
            try
            {
                // Обновляем данные из callback
                LastSignal = jsonData;

                // Простая логика для демонстрации - можете расширить
                if (jsonData.Contains("BTCUSDT") || jsonData.Contains("ETHUSDT"))
                {
                    TradesCount++;
                    // Здесь можете добавить парсинг JSON и расчет PnL
                }

                // Обновляем UI из не-UI потока
                InvokeAsync(StateHasChanged);

                Logger.LogDebug("📊 Received data: {Data}", jsonData.Length > 100 ?
                    jsonData.Substring(0, 100)  + "..." : jsonData);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "❌ Ошибка при обработке данных от Rust");
            }
        }

        private string GetStatusClass() => BotConnected ? "text-success" : "text-danger";

    public void Dispose()
    {
        if (rusterBot != null)
        {
            rusterBot.OnDataReceived -= OnBotDataReceived;
            rusterBot.Dispose();
            rusterBot = null;
        }
        Logger.LogInformation("🧹 Dashboard disposed");
    }
}