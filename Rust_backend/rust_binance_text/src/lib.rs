// src/lib.rs
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_int};

// –¢–∏–ø C-—Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
pub type DataCallback = extern "C" fn(*const c_char);

mod main_bot;
use crate::main_bot::run_trading_bot;

#[no_mangle]
pub extern "C" fn start_bot(
    coins: *const c_char,
    stream_types: *const c_char,
    keep_running: *mut c_int,
    callback: Option<DataCallback>,
) -> *mut c_char {
    println!("üöÄ [Rust] start_bot –≤—ã–∑–≤–∞–Ω");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null-—É–∫–∞–∑–∞—Ç–µ–ª–∏
    if coins.is_null() {
        println!("‚ùå [Rust] coins == NULL");
        return CString::new("coins pointer is null").unwrap().into_raw();
    }

    if stream_types.is_null() {
        println!("‚ùå [Rust] stream_types == NULL");
        return CString::new("stream_types pointer is null").unwrap().into_raw();
    }

    if keep_running.is_null() {
        println!("‚ùå [Rust] keep_running == NULL");
        return CString::new("keep_running pointer is null").unwrap().into_raw();
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
    let coins_str = unsafe { CStr::from_ptr(coins).to_str().map(|s| s.to_owned()) };
    let streams_str = unsafe { CStr::from_ptr(stream_types).to_str().map(|s| s.to_owned()) };

    let (coins_owned, streams_owned) = match (coins_str, streams_str) {
        (Ok(coins), Ok(streams)) => {
            println!("‚úÖ [Rust] –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏: coins = '{}', streams = '{}'", coins, streams);
            (coins, streams)
        }
        _ => {
            println!("‚ùå [Rust] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CStr –≤ String");
            return CString::new("Invalid input strings").unwrap().into_raw();
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ callback
    let Some(callback_fn) = callback else {
        println!("‚ùå [Rust] Callback == NULL");
        return CString::new("Callback function is null").unwrap().into_raw();
    };

    println!("üîÑ [Rust] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tokio runtime...");
    let rt = match tokio::runtime::Runtime::new() {
        Ok(rt) => {
            println!("‚úÖ [Rust] Tokio runtime —Å–æ–∑–¥–∞–Ω");
            rt
        }
        Err(e) => {
            println!("‚ùå [Rust] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Tokio runtime: {e}");
            return CString::new(format!("Runtime creation error: {e}")).unwrap().into_raw();
        }
    };

    println!("üèÅ [Rust] –ó–∞–ø—É—Å–∫ run_trading_bot...");
    match rt.block_on(run_trading_bot(
        &coins_owned,
        &streams_owned,
        keep_running,
        callback_fn,
    )) {
        Ok(_) => {
            println!("‚úÖ [Rust] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
            std::ptr::null_mut()
        }
        Err(err) => {
            println!("‚ùå [Rust] –û—à–∏–±–∫–∞ –≤ run_trading_bot: {err}");
            CString::new(err).unwrap().into_raw()
        }
    }
}
#[no_mangle]
pub extern "C" fn free_string(s: *mut c_char) {
    if !s.is_null() {
        unsafe { let _ = CString::from_raw(s); }
    }
}
